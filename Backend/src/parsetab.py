
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND CADENA CHAR COMA COMENTARIO_SIMPLE COMENTARIO_VARIAS_LINEAS DECIMAL DIFERENCIA DIV DOBLEPUNTO ENTERO ID IGUAL IGUALACION LLAVEA LLAVEC MAS MAYORIGUAL MAYORQUE MENORIGUAL MENORQUE MENOS MODULO NOT OR PARA PARC POR POT PUNTOCOMA RFALSE RPRINT RPRINTLN RTRUEinit            : instruccionesinstrucciones    : instrucciones instruccioninstrucciones    : instruccioninstruccion  : ins_print fin_instruccion\n                    | ins_println fin_instruccion\n                    | COMENTARIO_VARIAS_LINEAS\n                    | COMENTARIO_SIMPLE\n    instruccion        : error PUNTOCOMAfin_instruccion  : PUNTOCOMA ins_print   : RPRINT PARA expresion PARCins_println   : RPRINTLN PARA expresion PARC expresion :   PARA expresion PARC expresion : ENTEROexpresion : DECIMALexpresion : CADENAexpresion : CHARexpresion : RTRUEexpresion : RFALSE'
    
_lr_action_items = {'COMENTARIO_VARIAS_LINEAS':([0,2,3,6,7,11,12,13,14,15,],[6,6,-3,-6,-7,-2,-4,-9,-5,-8,]),'COMENTARIO_SIMPLE':([0,2,3,6,7,11,12,13,14,15,],[7,7,-3,-6,-7,-2,-4,-9,-5,-8,]),'error':([0,2,3,6,7,11,12,13,14,15,],[8,8,-3,-6,-7,-2,-4,-9,-5,-8,]),'RPRINT':([0,2,3,6,7,11,12,13,14,15,],[9,9,-3,-6,-7,-2,-4,-9,-5,-8,]),'RPRINTLN':([0,2,3,6,7,11,12,13,14,15,],[10,10,-3,-6,-7,-2,-4,-9,-5,-8,]),'$end':([1,2,3,6,7,11,12,13,14,15,],[0,-1,-3,-6,-7,-2,-4,-9,-5,-8,]),'PUNTOCOMA':([4,5,8,28,29,],[13,13,15,-10,-11,]),'PARA':([9,10,16,17,18,],[16,17,18,18,18,]),'ENTERO':([16,17,18,],[20,20,20,]),'DECIMAL':([16,17,18,],[21,21,21,]),'CADENA':([16,17,18,],[22,22,22,]),'CHAR':([16,17,18,],[23,23,23,]),'RTRUE':([16,17,18,],[24,24,24,]),'RFALSE':([16,17,18,],[25,25,25,]),'PARC':([19,20,21,22,23,24,25,26,27,30,],[28,-13,-14,-15,-16,-17,-18,29,30,-12,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'init':([0,],[1,]),'instrucciones':([0,],[2,]),'instruccion':([0,2,],[3,11,]),'ins_print':([0,2,],[4,4,]),'ins_println':([0,2,],[5,5,]),'fin_instruccion':([4,5,],[12,14,]),'expresion':([16,17,18,],[19,26,27,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> init","S'",1,None,None,None),
  ('init -> instrucciones','init',1,'p_init','Gramatica.py',168),
  ('instrucciones -> instrucciones instruccion','instrucciones',2,'p_instrucciones_instrucciones_instruccion','Gramatica.py',172),
  ('instrucciones -> instruccion','instrucciones',1,'p_instrucciones_instruccion','Gramatica.py',180),
  ('instruccion -> ins_print fin_instruccion','instruccion',2,'p_instruccion','Gramatica.py',189),
  ('instruccion -> ins_println fin_instruccion','instruccion',2,'p_instruccion','Gramatica.py',190),
  ('instruccion -> COMENTARIO_VARIAS_LINEAS','instruccion',1,'p_instruccion','Gramatica.py',191),
  ('instruccion -> COMENTARIO_SIMPLE','instruccion',1,'p_instruccion','Gramatica.py',192),
  ('instruccion -> error PUNTOCOMA','instruccion',2,'p_instruccion_error','Gramatica.py',199),
  ('fin_instruccion -> PUNTOCOMA','fin_instruccion',1,'p_fin_instruccion','Gramatica.py',204),
  ('ins_print -> RPRINT PARA expresion PARC','ins_print',4,'p_imprimir_print','Gramatica.py',209),
  ('ins_println -> RPRINTLN PARA expresion PARC','ins_println',4,'p_imprimir_println','Gramatica.py',213),
  ('expresion -> PARA expresion PARC','expresion',3,'p_expresion_agrupacion','Gramatica.py',218),
  ('expresion -> ENTERO','expresion',1,'p_expresion_entero','Gramatica.py',222),
  ('expresion -> DECIMAL','expresion',1,'p_primitivo_decimal','Gramatica.py',226),
  ('expresion -> CADENA','expresion',1,'p_primitivo_cadena','Gramatica.py',230),
  ('expresion -> CHAR','expresion',1,'p_primitivo_char','Gramatica.py',234),
  ('expresion -> RTRUE','expresion',1,'p_primitivo_true','Gramatica.py',238),
  ('expresion -> RFALSE','expresion',1,'p_primitivo_false','Gramatica.py',242),
]
